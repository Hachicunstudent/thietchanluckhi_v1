/* eslint-disable no-restricted-globals */


import { clientsClaim, skipWaiting } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

// Version control for the cache
const CACHE_VERSION = 'v2';
const ASSETS_CACHE_NAME = `my-site-assets-cache-${CACHE_VERSION}`;
const OPENCV_CACHE_NAME = `opencv-js-cache-${CACHE_VERSION}`;

clientsClaim();
skipWaiting();

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
precacheAndRoute(self.__WB_MANIFEST, { cacheName: ASSETS_CACHE_NAME });

// Set up App Shell-style routing
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  ({ request, url }) => {
    if (request.mode !== 'navigate') return false;
    if (url.pathname.startsWith('/_')) return false;
    if (url.pathname.match(fileExtensionRegexp)) return false;
    return true;
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// Runtime caching for .png requests
registerRoute(
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [new ExpirationPlugin({ maxEntries: 50 })],
  })
);

// Cache opencv.js from CDN
registerRoute(
  ({ url }) => url.href === 'https://docs.opencv.org/master/opencv.js',
  new StaleWhileRevalidate({
    cacheName: OPENCV_CACHE_NAME,
    plugins: [new ExpirationPlugin({ maxEntries: 1, maxAgeSeconds: 30 * 24 * 60 * 60 })],
  })
);

// Message event to skip waiting
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});
